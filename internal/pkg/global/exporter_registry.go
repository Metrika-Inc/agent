package global

import (
	"agent/api/v1/model"
	"context"
	"sync"
	"time"

	"go.uber.org/zap"
)

var DefaultExporterRegisterer = new(ExporterRegisterer)

// TODO: make timeout configurable per exporter basis
var DefaultExporterTimeout = 5 * time.Second

// Exporter interface describes the interface to be implemented for accessing
// the data stream generated by the enabled agent watchers.
type Exporter interface {
	// HandleMessage optionally processes and then exports an
	// incoming Metrika Agent Message (Metric or Event).
	// Used as a callback function by ExporterRegisterer on
	// every new message emitted by agent watchers.
	HandleMessage(ctx context.Context, msg *model.Message)
}

type ExporterHandler struct {
	exporter       Exporter
	subscriptionCh <-chan interface{}
}

type ExporterRegisterer struct {
	handlers []ExporterHandler
}

func (e *ExporterRegisterer) Register(exporter Exporter, subCh chan interface{}) error {
	e.handlers = append(e.handlers, ExporterHandler{exporter: exporter, subscriptionCh: subCh})

	return nil
}

func (e *ExporterRegisterer) Start(ctx context.Context, wg *sync.WaitGroup) error {
	for i := range e.handlers {
		wg.Add(1)
		go func(e ExporterHandler) {
			MessageListener(ctx, wg, e.subscriptionCh, e.exporter)
		}(e.handlers[i])
	}

	return nil
}

// MessageListener reads from one Watcher emit channel
// and sequentially passes received messages to the exporter's
// HandleMessage method.
func MessageListener(ctx context.Context, wg *sync.WaitGroup, ch <-chan interface{}, e Exporter) {
	defer wg.Done()
	for {
		select {
		case m := <-ch:
			message, ok := m.(*model.Message)
			if !ok {
				zap.S().Warnf("Unexpected type %T, skipping item", m)
				continue
			}
			ctx, cancel := context.WithTimeout(ctx, DefaultExporterTimeout)
			e.HandleMessage(ctx, message)
			cancel()
		case <-ctx.Done():
			zap.S().Info("exiting listener")
			return
		}
	}
}
